// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Math is an autogenerated mock type for the Math type
type Math struct {
	mock.Mock
}

// Kurang provides a mock function with given fields: a, b
func (_m *Math) Kurang(a int64, b int64) int64 {
	ret := _m.Called(a, b)

	if len(ret) == 0 {
		panic("no return value specified for Kurang")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64, int64) int64); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Tambah provides a mock function with given fields: a, b
func (_m *Math) Tambah(a int64, b int64) (int64, error) {
	ret := _m.Called(a, b)

	if len(ret) == 0 {
		panic("no return value specified for Tambah")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (int64, error)); ok {
		return rf(a, b)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) int64); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(a, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMath creates a new instance of Math. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMath(t interface {
	mock.TestingT
	Cleanup(func())
}) *Math {
	mock := &Math{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
